package alg.programmars.Graph_0402_49191;

import java.util.*;

/*

모두 연결되어 있어야한다.
들어오는 edge가 없다면 제외.
모두가 연결되어있다면 포함
// 1. 모두 탐색이 가능한 노드를 기준. 가장 먼저 찾는다.
// 2. 모든 노드가 연결되어 있는 경우.
// 3. 자기보다 작은 것을 빼고. 모든 노드 탐색 가능할 경우


41
31
2
5
*/
public class Graph_0402_49191 {
	public static void main(String[] args) {
		int n = 0;
		int[][] results = {{4, 3}, {4, 2}, {3, 2}, {1, 2}, {2, 5}};
		Solution sol = new Solution();
		System.out.println(sol.solution(n, results));
	}
}

class Solution {
    public int solution(int n, int[][] results) {
		int answer = 0;
		boolean[][] map = new boolean[n+1][n+1];
		
		// 2차원 ArrayList 사용
		// ArrayList<Integer>[] map = new ArrayList[n + 1];
		// for(int i = 0; i < n + 1; i++) {
		// 	map[i] = new ArrayList<>();
		// }

		for(int i = 0; i < n + 1; i++) {
			map[results[n][0]][results[n][0]] = true;
		}

		for(int i = 0; i < n + 1; i++) {
			for(int j = 0; j < n + 1; j++) {
				if(!map[i][j] || !map[j][i]) {
					continue;
				}
				
			}
		}

        return answer;
    }

	public void dfs(boolean[][] map, int start) {
		
	}
}