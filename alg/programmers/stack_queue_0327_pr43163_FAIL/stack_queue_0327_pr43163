// 프로그래머스 - DFS/BFS - 단어변환
package alg.pprogrammersrogrammars.stack_queue_0327_pr43163;
import java.util.Queue;
import java.util.LinkedList;

public class stack_queue_0327_pr43163 {
	public static void main(String[] args) {
		Solution sol = new Solution();
		String begin = "hot";
		String target = "lot";
		// String[] words = {"hot", "dot", "dog", "lot", "log", "cog"};
		// String[] words = {"hot", "cog"};
		String[] words = { "hot", "dot", "dog", "lot", "log"};
		System.out.println(sol.solution(begin, target, words));
	}
}

class Solution {
    public int solution(String begin, String target, String[] words) {
		int stringLen = begin.length();
		boolean visit[] = new boolean[words.length];
		Queue<Integer> qq = new LinkedList<>();
		// q.add(begin);
		String beforeWord = begin;
		int sameWordNum = 0;
		int answer = 0;
		int currQSize = 0;

		for (int i = 0; i < words.length; i++) {
			int sameCharNum = 0;
			for (int j = 0; j < stringLen; j++) {
				if (beforeWord.charAt(j) != words[i].charAt(j)) {
					sameCharNum++;
					if (sameCharNum > 1) {
						break;
					}
				}
			}
			if (sameCharNum == 1) {
				visit[i] = true;
				qq.add(i);
			}
			
			if (target.equals(words[i])) {
				sameWordNum++;
			}
		}
		

		if (sameWordNum >= 1 && !qq.isEmpty()) {
			currQSize = qq.size();
			answer++;
		} else {
			qq.clear();
		}
		String currWord = "";

		while (!qq.isEmpty()) {
			if (currQSize == 0) {
				answer++;
				currQSize = qq.size();
			}
			currQSize--;
			currWord = words[qq.poll()];

			for (int i = 0; i < words.length; i++) {
				if (visit[i]) {
					continue;
				}

				int sameCharNum = 0;
				for (int j = 0; j < stringLen; j++) {
					if (currWord.charAt(j) != words[i].charAt(j)) {
						sameCharNum++;
						if (sameCharNum > 1) {
							break;
						}
					}
				}
				if (sameCharNum == 1) {
					visit[i] = true;
					qq.add(i);
				}
			}
		}

		if (!currWord.equals(target)) {
			answer = 0;
		} 

		return answer;
    }
}